library(shiny); runApp('example_app.R')
shinyApp(ui, server)
runApp('example_csv_load_app.R')
runApp('example_csv_load_app.R')
runApp('example_csv_load_app.R')
runApp('example_csv_load_app.R')
runApp('example_csv_upload_app.R')
runApp('draft_gap_analysis_app_1.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='atlanta', token='8F74C78C2B5DCE973334DB015668D663', secret='Wf2yPps2qyySCj6nsCDy7d81XoR3/sDoQI677Esv')
runApp('draft_gap_analysis_app_1.R')
runApp('draft_gap_analysis_app_1.R')
rsconnect::setAccountInfo(name='atlanta', token='8F74C78C2B5DCE973334DB015668D663', secret='Wf2yPps2qyySCj6nsCDy7d81XoR3/sDoQI677Esv')
runApp('draft_gap_analysis_app_2.R')
runApp('draft_gap_analysis_app_2.R')
runApp('draft_gap_analysis_app_2.R')
runApp('draft_gap_analysis_app_2.R')
runApp('draft_gap_analysis_app_2.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_3.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_5.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_4.R')
runApp('draft_gap_analysis_app_6.R')
runApp('draft_gap_analysis_app_6.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_7.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
runApp('draft_gap_analysis_app_8.R')
library(shiny); runApp('draft_gap_analysis_app_9.R')
runApp('draft_gap_analysis_app_9.R')
runApp('draft_gap_analysis_app_9.R')
runApp('draft_gap_analysis_app_9.R')
runApp('draft_gap_analysis_app_9.R')
runApp('draft_gap_analysis_app_9.R')
library(rgbif)
species <- "Pseudotorellia crista"
# Fetch GBIF data
# limiting to 100 records for demonstration
gbif_data <- occ_search(scientificName = species, limit = 100)
View(gbif_data)
species <- "Pseudotorellia Florin"
# Fetch GBIF data
# limiting to 100 records for demonstration
gbif_data <- occ_search(scientificName = species, limit = 100)
View(gbif_data)
gbif_data[,1]
gbif_data[1]
gbif_data[2]
gbif_data[3]
gbif_data[3][1]
gbif_data[3][[1]]
gbif_data[3[1]]
gbif_data[3[[1]]]
gbif_data[3,1]
gbif_data[3],1]
gbif_data[3][,1]
gbif_data[3][1]
gbif_df <- do.call(rbind.data.frame, gbif_data[3])
View(gbif_df)
gbif_df[,1]
gbif_df[,86]
gbif_df[,85]
# Extracting only gbif_data with lat/longs
sub_gbif <- subset(gbif_df, !is.na(gbif_df[,85]) & !is.na(gbif_df[,86]))
